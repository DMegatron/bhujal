<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title><%= title %></title>
    <link rel="stylesheet" href="/css/main.css">
    <link rel="stylesheet" href="https://unpkg.com/leaflet@1.9.4/dist/leaflet.css" />
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" rel="stylesheet">
</head>
<body>
    <!-- Navigation -->
    <nav class="navbar">
        <div class="nav-container">
            <a href="/" class="nav-brand">
                <i class="fas fa-tint"></i>
                Bhujal
            </a>
            <div class="nav-toggle">
                <span></span>
                <span></span>
                <span></span>
            </div>
            <div class="nav-menu">
                <a href="/dashboard" class="nav-link">Dashboard</a>
                <a href="/map" class="nav-link active">Map</a>
                <a href="/profile" class="nav-link">Profile</a>
                <a href="/reports" class="nav-link">Reports</a>
                <form action="/logout" method="POST" class="nav-logout">
                    <button type="submit" class="btn btn-logout">Logout</button>
                </form>
            </div>
        </div>
    </nav>

    <!-- Flash Messages -->
    <% if (success_msg && success_msg.length > 0) { %>
        <div class="alert alert-success">
            <i class="fas fa-check-circle"></i>
            <%= success_msg %>
        </div>
    <% } %>

    <% if (error_msg && error_msg.length > 0) { %>
        <div class="alert alert-error">
            <i class="fas fa-exclamation-circle"></i>
            <%= error_msg %>
        </div>
    <% } %>

    <!-- Main Content -->
    <main class="map-main">
        <div class="map-container">
            <!-- Map Controls -->
            <div class="map-controls">
                <!-- Search Box -->
                <div class="map-search-container">
                    <div class="search-input-wrapper">
                        <input 
                            type="text" 
                            id="mapSearchInput" 
                            class="map-search-input" 
                            placeholder="Search by state, city, district, PIN code..."
                            autocomplete="off"
                        >
                        <button id="mapSearchBtn" class="map-search-btn" title="Search location">
                            <i class="fas fa-search"></i>
                        </button>
                        <button id="clearSearchBtn" class="map-clear-btn" title="Clear search" style="display: none;">
                            <i class="fas fa-times"></i>
                        </button>
                    </div>
                    <div id="searchSuggestions" class="search-suggestions" style="display: none;"></div>
                    <div id="searchResults" class="search-results" style="display: none;">
                        <div class="search-results-header">
                            <span>Search Results</span>
                            <button id="closeSearchResults" class="close-results-btn">
                                <i class="fas fa-times"></i>
                            </button>
                        </div>
                        <div id="searchResultsList" class="search-results-list"></div>
                    </div>
                </div>

                <div class="controls-group">
                    <button id="addBorewellBtn" class="btn btn-primary" title="Click on map to add borewell">
                        <i class="fas fa-plus"></i>
                        Add Borewell
                    </button>
                    <button id="locateBtn" class="btn btn-secondary" title="Find my location">
                        <i class="fas fa-crosshairs"></i>
                        Find Me
                    </button>
                    <button id="cancelAddBtn" class="btn btn-danger" style="display: none;" title="Cancel adding borewell">
                        <i class="fas fa-times"></i>
                        Cancel
                    </button>
                </div>
                
                <!-- Map Mode Indicator -->
                <div id="mapModeIndicator" class="map-mode-indicator" style="display: none;">
                    <div class="mode-content">
                        <i class="fas fa-map-pin"></i>
                        <span>Click on the map to place your borewell</span>
                    </div>
                </div>
                
                <div class="weather-widget" id="weatherWidget">
                    <div class="weather-loading">Loading weather...</div>
                </div>
            </div>

            <!-- Map -->
            <div id="map"></div>
            
            <!-- Location Info Panel -->
            <div id="locationInfoPanel" class="location-info-panel" style="display: none;">
                <div class="panel-header">
                    <h4><i class="fas fa-map-marker-alt"></i> Selected Location</h4>
                </div>
                <div class="panel-content">
                    <div class="location-details">
                        <div class="detail-item">
                            <label>Latitude:</label>
                            <span id="selectedLat">-</span>
                        </div>
                        <div class="detail-item">
                            <label>Longitude:</label>
                            <span id="selectedLng">-</span>
                        </div>
                        <div class="detail-item">
                            <label>Address:</label>
                            <span id="selectedAddress">Loading...</span>
                        </div>
                    </div>
                    <div class="panel-actions">
                        <button id="confirmLocationBtn" class="btn btn-success btn-small">
                            <i class="fas fa-check"></i>
                            Confirm & Register
                        </button>
                        <button id="changeLocationBtn" class="btn btn-secondary btn-small">
                            <i class="fas fa-edit"></i>
                            Change Location
                        </button>
                    </div>
                </div>
            </div>

            <!-- Borewell Registration Modal -->
            <div id="borewellModal" class="modal">
                <div class="modal-content">
                    <div class="modal-header">
                        <h2><i class="fas fa-tint"></i> Register New Borewell</h2>
                        <button id="closeModal" class="modal-close">
                            <i class="fas fa-times"></i>
                        </button>
                    </div>

                    <form action="/borewells" method="POST" class="borewell-form">
                        <!-- Location Information (Read-only) -->
                        <div class="location-section">
                            <h3><i class="fas fa-map-marker-alt"></i> Location Details</h3>
                            <div class="form-row">
                                <div class="form-group">
                                    <label for="latitude">Latitude</label>
                                    <input type="number" id="latitude" name="latitude" step="any" required class="form-input" readonly>
                                </div>
                                <div class="form-group">
                                    <label for="longitude">Longitude</label>
                                    <input type="number" id="longitude" name="longitude" step="any" required class="form-input" readonly>
                                </div>
                            </div>
                            <div class="form-group">
                                <label for="locationAddress">Address</label>
                                <input type="text" id="locationAddress" class="form-input" readonly placeholder="Address will be auto-detected">
                            </div>
                        </div>

                        <!-- Well Information -->
                        <div class="well-section">
                            <h3><i class="fas fa-cog"></i> Well Information</h3>
                            <div class="form-group">
                                <label for="wellType">Well Type</label>
                                <select id="wellType" name="wellType" required class="form-input form-select">
                                    <option value="">Select Well Type</option>
                                    <option value="dug-well">Dug Well (Traditional open well)</option>
                                    <option value="drilled-well">Drilled Well (Machine drilled)</option>
                                    <option value="tube-well">Tube Well (Deep bore with casing)</option>
                                    <option value="hand-pump">Hand Pump</option>
                                    <option value="other">Other</option>
                                </select>
                            </div>

                            <div class="form-row">
                                <div class="form-group">
                                    <label for="depthType">Depth Category</label>
                                    <select id="depthType" name="depthType" required class="form-input form-select">
                                        <option value="">Select Depth Category</option>
                                        <option value="shallow">Shallow (0-50m)</option>
                                        <option value="medium">Medium (50-150m)</option>
                                        <option value="deep">Deep (150m+)</option>
                                    </select>
                                </div>
                                <div class="form-group">
                                    <label for="exactDepth">Exact Depth (meters)</label>
                                    <input type="number" id="exactDepth" name="exactDepth" step="0.1" min="0" required class="form-input" placeholder="e.g., 45.5">
                                </div>
                            </div>

                            <div class="form-group">
                                <label for="description">Additional Details</label>
                                <textarea id="description" name="description" rows="3" class="form-input form-textarea" placeholder="Any additional information about the borewell (optional)"></textarea>
                            </div>
                        </div>

                        <!-- Well Features -->
                        <div class="features-section">
                            <h3><i class="fas fa-wrench"></i> Well Features</h3>
                            <div class="checkbox-group">
                                <label class="checkbox-label">
                                    <input type="checkbox" id="motorOperated" name="motorOperated">
                                    <span class="checkmark"></span>
                                    <div class="checkbox-content">
                                        <strong>Motor Operated</strong>
                                        <small>Electric or diesel pump installed</small>
                                    </div>
                                </label>
                                <label class="checkbox-label">
                                    <input type="checkbox" id="authoritiesAware" name="authoritiesAware">
                                    <span class="checkmark"></span>
                                    <div class="checkbox-content">
                                        <strong>Authorities Aware</strong>
                                        <small>Registered with local water authority</small>
                                    </div>
                                </label>
                                <label class="checkbox-label">
                                    <input type="checkbox" id="isPublic" name="isPublic" checked>
                                    <span class="checkmark"></span>
                                    <div class="checkbox-content">
                                        <strong>Make Public</strong>
                                        <small>Allow others to view this borewell on the map</small>
                                    </div>
                                </label>
                            </div>
                        </div>

                        <div class="form-actions">
                            <button type="button" id="cancelBtn" class="btn btn-secondary">
                                <i class="fas fa-times"></i>
                                Cancel
                            </button>
                            <button type="submit" class="btn btn-primary">
                                <i class="fas fa-save"></i>
                                Register Borewell
                            </button>
                        </div>
                    </form>
                </div>
            </div>

            <!-- Legend -->
            <div class="map-legend">
                <h4>Legend</h4>
                <div class="legend-item">
                    <div class="legend-marker your-well"></div>
                    <span>Your Wells</span>
                </div>
                <div class="legend-item">
                    <div class="legend-marker other-well"></div>
                    <span>Other Wells</span>
                </div>
                <div class="legend-item">
                    <div class="legend-marker active"></div>
                    <span>Active</span>
                </div>
                <div class="legend-item">
                    <div class="legend-marker inactive"></div>
                    <span>Inactive</span>
                </div>
            </div>
        </div>
    </main>

    <script src="https://unpkg.com/leaflet@1.9.4/dist/leaflet.js"></script>
    <script>
        // Global variables
        let map;
        let borewells = [];
        let currentUserId = '';
        let selectedLocation = null;
        let tempMarker = null;
        let isAddingBorewell = false;
        let searchMarkers = [];
        let searchDebounceTimer = null;

        // Initialize the application
        document.addEventListener('DOMContentLoaded', function() {
            initializeMap();
            loadBorewells();
            setupEventListeners();
            loadInitialWeather();
            setupSearchFunctionality();
        });

        // Initialize Leaflet map
        function initializeMap() {
            // Create map centered on India
            map = L.map('map', {
                center: [20.5937, 78.9629],
                zoom: 5,
                zoomControl: true,
                scrollWheelZoom: true,
                doubleClickZoom: false // Disable double-click zoom to avoid conflicts
            });

            // Add tile layer with better styling
            L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
                attribution: '© <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors',
                maxZoom: 19,
                tileSize: 256,
                zoomOffset: 0
            }).addTo(map);

            // Add scale control
            L.control.scale({
                position: 'bottomright',
                metric: true,
                imperial: false
            }).addTo(map);

            // Custom marker styles
            createCustomStyles();
        }

        // Load borewell data
        function loadBorewells() {
            try {
                borewells = JSON.parse('<%- JSON.stringify(borewells) %>');
                currentUserId = '<%= user.id %>';
                addBorewellsToMap();
            } catch (error) {
                console.error('Error loading borewell data:', error);
                showNotification('Error loading borewell data', 'error');
            }
        }

        // Load weather for specific borewell
        async function loadBorewellWeather(borewellId, lat, lng) {
            const weatherContainer = document.getElementById(`weather-${borewellId}`);
            if (!weatherContainer) return;
            
            weatherContainer.innerHTML = '<div class="weather-loading-small"><i class="fas fa-spinner fa-spin"></i> Loading...</div>';
            
            try {
                const response = await fetch(`/api/weather/current?lat=${lat}&lng=${lng}`);
                const result = await response.json();
                
                if (!result.success) {
                    throw new Error(result.message);
                }
                
                const data = result.data;
                
                weatherContainer.innerHTML = `
                    <div class="borewell-weather-info">
                        <div class="weather-compact">
                            <div class="weather-temp">
                                <img src="https://openweathermap.org/img/wn/${data.icon}.png" alt="${data.description}">
                                <span class="temp">${data.temperature}°C</span>
                            </div>
                            <div class="weather-details-compact">
                                <div class="weather-item-small">
                                    <i class="fas fa-tint"></i>
                                    <span>${data.humidity}%</span>
                                </div>
                                <div class="weather-item-small">
                                    <i class="fas fa-wind"></i>
                                    <span>${data.windSpeed} km/h</span>
                                </div>
                                <div class="weather-item-small">
                                    <i class="fas fa-thermometer-half"></i>
                                    <span>${data.pressure} hPa</span>
                                </div>
                            </div>
                        </div>
                        <div class="weather-desc">${data.description}</div>
                    </div>
                `;
                
            } catch (error) {
                console.error('Borewell weather error:', error);
                weatherContainer.innerHTML = `
                    <div class="weather-error-small">
                        <i class="fas fa-exclamation-triangle"></i>
                        <span>Weather unavailable</span>
                    </div>
                `;
            }
        }

        // Predict water level based on weather
        async function predictWaterLevel(temperature, precipitation, humidity, pressure) {
            try {
                const response = await fetch(`/api/weather/predict-water-level?temperature=${temperature}&precipitation=${precipitation}&humidity=${humidity}&pressure=${pressure}`, {
                    method: 'POST'
                });
                const result = await response.json();
                
                if (!result.success) {
                    throw new Error(result.message);
                }
                
                showWaterLevelPrediction(result.prediction);
                
            } catch (error) {
                console.error('Water level prediction error:', error);
                showNotification('Failed to predict water level', 'error');
            }
        }

        // Show water level prediction
        function showWaterLevelPrediction(prediction) {
            const modal = document.createElement('div');
            modal.className = 'modal prediction-modal';
            modal.innerHTML = `
                <div class="modal-content">
                    <div class="modal-header">
                        <h2><i class="fas fa-water"></i> Water Level Prediction</h2>
                        <button class="modal-close" onclick="this.closest('.modal').remove()">
                            <i class="fas fa-times"></i>
                        </button>
                    </div>
                    <div class="prediction-content">
                        <div class="prediction-main">
                            <div class="prediction-value">
                                <span class="value">${prediction.waterLevel}</span>
                                <span class="unit">${prediction.unit}</span>
                            </div>
                            <div class="confidence-meter">
                                <div class="confidence-label">Confidence: ${Math.round(prediction.confidence * 100)}%</div>
                                <div class="confidence-bar">
                                    <div class="confidence-fill" style="width: ${prediction.confidence * 100}%"></div>
                                </div>
                            </div>
                        </div>
                        
                        <div class="prediction-factors">
                            <h4>Factors Considered:</h4>
                            <div class="factors-grid">
                                <div class="factor-item">
                                    <i class="fas fa-thermometer-half"></i>
                                    <span class="factor-label">Temperature</span>
                                    <span class="factor-value">${prediction.factors.temperature}°C</span>
                                </div>
                                <div class="factor-item">
                                    <i class="fas fa-cloud-rain"></i>
                                    <span class="factor-label">Precipitation</span>
                                    <span class="factor-value">${prediction.factors.precipitation} mm</span>
                                </div>
                                <div class="factor-item">
                                    <i class="fas fa-tint"></i>
                                    <span class="factor-label">Humidity</span>
                                    <span class="factor-value">${prediction.factors.humidity}%</span>
                                </div>
                                <div class="factor-item">
                                    <i class="fas fa-weight"></i>
                                    <span class="factor-label">Pressure</span>
                                    <span class="factor-value">${prediction.factors.pressure} hPa</span>
                                </div>
                            </div>
                        </div>
                        
                        <div class="prediction-note">
                            <p><strong>Note:</strong> This prediction is based on current weather conditions using ${prediction.method === 'ml_model' ? 'machine learning models' : 'statistical analysis'}. Actual water levels may vary based on local geological conditions, seasonal patterns, and other factors.</p>
                        </div>
                    </div>
                    <div class="modal-actions">
                        <button class="btn btn-secondary" onclick="this.closest('.modal').remove()">
                            <i class="fas fa-times"></i>
                            Close
                        </button>
                    </div>
                </div>
            `;
            
            document.body.appendChild(modal);
            modal.style.display = 'flex';
        }

        // Enhanced add borewells to map with weather loading
        function addBorewellsToMap() {
            borewells.forEach(borewell => {
                const isYourWell = borewell.customer._id === currentUserId;
                
                // Create custom marker icon
                const markerIcon = createBorewellIcon(borewell, isYourWell);
                
                // Create marker
                const marker = L.marker([borewell.location.latitude, borewell.location.longitude], {
                    icon: markerIcon
                }).addTo(map);

                // Enhanced popup content
                const popupContent = createBorewellPopup(borewell, isYourWell);
                marker.bindPopup(popupContent, {
                    maxWidth: 350,
                    className: 'custom-popup'
                });

                // Load weather when popup opens
                marker.on('popupopen', function() {
                    setTimeout(() => {
                        loadBorewellWeather(borewell._id, borewell.location.latitude, borewell.location.longitude);
                    }, 100);
                });
            });
        }

        // Create custom borewell icon
        function createBorewellIcon(borewell, isYourWell) {
            const iconColor = isYourWell ? '#3b82f6' : '#10b981';
            const statusColor = borewell.status === 'active' ? '#22c55e' : '#f59e0b';
            
            return L.divIcon({
                className: 'custom-borewell-marker',
                html: `
                    <div class="borewell-marker ${isYourWell ? 'your-well' : 'other-well'} ${borewell.status}">
                        <div class="marker-inner" style="background-color: ${iconColor}; border-color: ${statusColor};">
                            <i class="fas fa-tint"></i>
                        </div>
                        <div class="marker-pulse" style="background-color: ${iconColor};"></div>
                    </div>
                `,
                iconSize: [30, 30],
                iconAnchor: [15, 15],
                popupAnchor: [0, -15]
            });
        }

        // Create enhanced popup content with weather data
        function createBorewellPopup(borewell, isYourWell) {
            const popupId = `popup-${borewell._id}`;
            return `
                <div class="borewell-popup" id="${popupId}">
                    <div class="popup-header">
                        <h4><i class="fas fa-tint"></i> ${borewell.wellType.replace('-', ' ').toUpperCase()}</h4>
                        <span class="status-badge ${borewell.status}">${borewell.status.toUpperCase()}</span>
                    </div>
                    
                    <div class="popup-content">
                        <div class="popup-section">
                            <div class="popup-item">
                                <i class="fas fa-user"></i>
                                <div>
                                    <strong>Owner:</strong>
                                    <span>${borewell.customer.name}</span>
                                </div>
                            </div>
                            
                            <div class="popup-item">
                                <i class="fas fa-ruler-vertical"></i>
                                <div>
                                    <strong>Depth:</strong>
                                    <span>${borewell.exactDepth}m (${borewell.depthType})</span>
                                </div>
                            </div>
                            
                            <div class="popup-item">
                                <i class="fas fa-phone"></i>
                                <div>
                                    <strong>Contact:</strong>
                                    <span>${borewell.customer.phoneNumber}</span>
                                </div>
                            </div>
                        </div>
                        
                        <!-- Weather Section -->
                        <div class="popup-section">
                            <div class="popup-weather-header">
                                <h5><i class="fas fa-cloud-sun"></i> Local Weather</h5>
                                <button class="btn btn-small btn-refresh" onclick="loadBorewellWeather('${borewell._id}', ${borewell.location.latitude}, ${borewell.location.longitude})">
                                    <i class="fas fa-sync-alt"></i>
                                </button>
                            </div>
                            <div id="weather-${borewell._id}" class="popup-weather">
                                <div class="weather-loading-small">
                                    <i class="fas fa-spinner fa-spin"></i>
                                    Loading weather...
                                </div>
                            </div>
                        </div>
                        
                        ${borewell.description ? `
                            <div class="popup-section">
                                <div class="popup-item">
                                    <i class="fas fa-info-circle"></i>
                                    <div>
                                        <strong>Description:</strong>
                                        <span>${borewell.description}</span>
                                    </div>
                                </div>
                            </div>
                        ` : ''}
                        
                        <div class="popup-features">
                            ${borewell.motorOperated ? '<span class="feature-tag"><i class="fas fa-cog"></i> Motor Operated</span>' : ''}
                            ${borewell.authoritiesAware ? '<span class="feature-tag"><i class="fas fa-shield-alt"></i> Authorities Aware</span>' : ''}
                        </div>
                        
                        ${isYourWell ? `
                            <div class="popup-actions">
                                <button class="btn btn-small btn-primary" onclick="editBorewell('${borewell._id}')">
                                    <i class="fas fa-edit"></i> Edit
                                </button>
                                <button class="btn btn-small btn-secondary" onclick="viewBorewellDetails('${borewell._id}')">
                                    <i class="fas fa-eye"></i> Details
                                </button>
                            </div>
                        ` : `
                            <div class="popup-actions">
                                <!-- No actions for other users' borewells -->
                            </div>
                        `}
                    </div>
                </div>
            `;
        }

        // Setup event listeners
        function setupEventListeners() {
            // Add borewell button
            document.getElementById('addBorewellBtn').addEventListener('click', enterAddMode);
            
            // Cancel add button
            document.getElementById('cancelAddBtn').addEventListener('click', exitAddMode);
            
            // Find me button
            document.getElementById('locateBtn').addEventListener('click', locateUser);
            
            // Modal controls
            document.getElementById('closeModal').addEventListener('click', closeModal);
            document.getElementById('cancelBtn').addEventListener('click', closeModal);
            
            // Location panel controls
            document.getElementById('confirmLocationBtn').addEventListener('click', openRegistrationModal);
            document.getElementById('changeLocationBtn').addEventListener('click', () => {
                hideLocationPanel();
                // Keep add mode active for selecting new location
            });
            
            // Form validation
            setupFormValidation();
        }

        // Setup search functionality
        function setupSearchFunctionality() {
            const searchInput = document.getElementById('mapSearchInput');
            const searchBtn = document.getElementById('mapSearchBtn');
            const clearBtn = document.getElementById('clearSearchBtn');
            const closeResultsBtn = document.getElementById('closeSearchResults');
            
            // Search input event listeners
            searchInput.addEventListener('input', handleSearchInput);
            searchInput.addEventListener('keydown', handleSearchKeydown);
            searchInput.addEventListener('focus', showSearchSuggestions);
            searchInput.addEventListener('blur', hideSearchSuggestions);
            
            // Button event listeners
            searchBtn.addEventListener('click', performSearch);
            clearBtn.addEventListener('click', clearSearch);
            closeResultsBtn.addEventListener('click', closeSearchResults);
            
            // Hide suggestions when clicking outside
            document.addEventListener('click', (e) => {
                if (!e.target.closest('.map-search-container')) {
                    hideSearchSuggestions();
                }
            });
        }

        // Handle search input with debouncing
        function handleSearchInput(e) {
            const query = e.target.value.trim();
            const clearBtn = document.getElementById('clearSearchBtn');
            const inputWrapper = document.querySelector('.search-input-wrapper');
            
            // Show/hide clear button and animate layout
            if (query.length > 0) {
                clearBtn.style.display = 'block';
                inputWrapper.classList.add('has-text');
            } else {
                clearBtn.style.display = 'none';
                inputWrapper.classList.remove('has-text');
                hideSearchSuggestions();
                return;
            }
            
            // Debounce the search to avoid too many API calls
            clearTimeout(searchDebounceTimer);
            searchDebounceTimer = setTimeout(() => {
                if (query.length >= 3) {
                    fetchSearchSuggestions(query);
                }
            }, 300);
        }

        // Handle search input keydown events
        function handleSearchKeydown(e) {
            if (e.key === 'Enter') {
                e.preventDefault();
                performSearch();
            } else if (e.key === 'Escape') {
                clearSearch();
            }
        }

        // Fetch search suggestions from Nominatim API
        async function fetchSearchSuggestions(query) {
            try {
                // Focus on Indian locations by adding country bias
                const response = await fetch(
                    `https://nominatim.openstreetmap.org/search?` +
                    `format=json&limit=5&countrycodes=in&q=${encodeURIComponent(query)}&` +
                    `addressdetails=1&extratags=1`
                );
                
                if (!response.ok) throw new Error('Search API error');
                
                const suggestions = await response.json();
                displaySearchSuggestions(suggestions);
                
            } catch (error) {
                console.error('Search suggestions error:', error);
                hideSearchSuggestions();
            }
        }

        // Display search suggestions
        function displaySearchSuggestions(suggestions) {
            const suggestionsContainer = document.getElementById('searchSuggestions');
            
            if (!suggestions || suggestions.length === 0) {
                hideSearchSuggestions();
                return;
            }
            
            suggestionsContainer.innerHTML = suggestions.map((suggestion, index) => {
                const displayName = formatLocationName(suggestion);
                const locationInfo = getLocationInfo(suggestion);
                
                return `
                    <div class="suggestion-item" data-index="${index}" onclick="selectSuggestion(${index})">
                        <div class="suggestion-main">
                            <i class="fas fa-map-marker-alt"></i>
                            <span class="suggestion-name">${displayName}</span>
                        </div>
                        <div class="suggestion-details">
                            ${locationInfo}
                        </div>
                    </div>
                `;
            }).join('');
            
            // Store suggestions for selection
            window.currentSuggestions = suggestions;
            suggestionsContainer.style.display = 'block';
        }

        // Format location name for display
        function formatLocationName(location) {
            const address = location.address || {};
            const name = location.display_name;
            
            // Try to extract meaningful parts
            const parts = [];
            
            if (address.village) parts.push(address.village);
            else if (address.town) parts.push(address.town);
            else if (address.city) parts.push(address.city);
            else if (address.district) parts.push(address.district);
            
            if (address.state && !parts.includes(address.state)) {
                parts.push(address.state);
            }
            
            return parts.length > 0 ? parts.join(', ') : name.split(',')[0];
        }

        // Get location info for suggestions
        function getLocationInfo(location) {
            const address = location.address || {};
            const type = location.type || location.class;
            
            const info = [];
            
            if (address.postcode) info.push(`PIN: ${address.postcode}`);
            if (address.district && !info.some(i => i.includes(address.district))) {
                info.push(`District: ${address.district}`);
            }
            if (type) info.push(`Type: ${type.charAt(0).toUpperCase() + type.slice(1)}`);
            
            return info.join(' • ');
        }

        // Select a suggestion
        function selectSuggestion(index) {
            const suggestion = window.currentSuggestions[index];
            if (!suggestion) return;
            
            const searchInput = document.getElementById('mapSearchInput');
            searchInput.value = formatLocationName(suggestion);
            
            hideSearchSuggestions();
            
            // Navigate to location
            const lat = parseFloat(suggestion.lat);
            const lng = parseFloat(suggestion.lon);
            
            navigateToLocation(lat, lng, suggestion);
        }

        // Navigate to selected location
        function navigateToLocation(lat, lng, locationData = null) {
            // Clear previous search markers
            clearSearchMarkers();
            
            // Determine appropriate zoom level based on location type
            let zoomLevel = 15;
            if (locationData) {
                const type = locationData.type;
                if (type === 'state') zoomLevel = 7;
                else if (type === 'district') zoomLevel = 10;
                else if (type === 'city' || type === 'town') zoomLevel = 13;
                else if (type === 'village') zoomLevel = 15;
            }
            
            // Animate to location
            map.setView([lat, lng], zoomLevel, {
                animate: true,
                duration: 1.5
            });
            
            // Add search result marker
            const searchIcon = L.divIcon({
                className: 'search-result-marker',
                html: `
                    <div class="search-marker-content">
                        <div class="search-marker-pulse"></div>
                        <i class="fas fa-search"></i>
                    </div>
                `,
                iconSize: [30, 30],
                iconAnchor: [15, 15]
            });
            
            const searchMarker = L.marker([lat, lng], { icon: searchIcon }).addTo(map);
            
            // Add popup with location information
            if (locationData) {
                const popupContent = createSearchPopupContent(locationData);
                searchMarker.bindPopup(popupContent, {
                    maxWidth: 300,
                    className: 'search-popup'
                }).openPopup();
            }
            
            searchMarkers.push(searchMarker);
            
            // Load weather for the location
            loadWeather(lat, lng);
            
            showNotification(`Navigated to ${locationData ? formatLocationName(locationData) : 'selected location'}`, 'success');
        }

        // Create popup content for search results
        function createSearchPopupContent(locationData) {
            const address = locationData.address || {};
            const displayName = formatLocationName(locationData);
            
            return `
                <div class="search-popup-content">
                    <div class="search-popup-header">
                        <h4><i class="fas fa-map-marker-alt"></i> ${displayName}</h4>
                    </div>
                    <div class="search-popup-details">
                        ${address.state ? `<div class="detail-item"><strong>State:</strong> ${address.state}</div>` : ''}
                        ${address.district ? `<div class="detail-item"><strong>District:</strong> ${address.district}</div>` : ''}
                        ${address.postcode ? `<div class="detail-item"><strong>PIN Code:</strong> ${address.postcode}</div>` : ''}
                        ${locationData.type ? `<div class="detail-item"><strong>Type:</strong> ${locationData.type.charAt(0).toUpperCase() + locationData.type.slice(1)}</div>` : ''}
                    </div>
                    <div class="search-popup-actions">
                        <button class="btn btn-small btn-primary" onclick="addBorewellHere(${locationData.lat}, ${locationData.lon})">
                            <i class="fas fa-plus"></i> Add Borewell Here
                        </button>
                    </div>
                </div>
            `;
        }

        // Add borewell at specific location
        function addBorewellHere(lat, lng) {
            // Close any open popups
            map.closePopup();
            
            // Set up for adding borewell
            selectedLocation = { lat, lng };
            
            // Remove previous temp marker
            removeTempMarker();
            
            // Add temp marker
            addTempMarker(lat, lng);
            
            // Update location panel
            updateLocationPanel(lat, lng);
            
            // Get address information
            reverseGeocode(lat, lng);
            
            // Enter add mode
            enterAddMode();
            
            showNotification('Location selected for borewell registration', 'info');
        }

        // Perform search
        async function performSearch() {
            const searchInput = document.getElementById('mapSearchInput');
            const query = searchInput.value.trim();
            
            if (!query) {
                showNotification('Please enter a location to search', 'warning');
                return;
            }
            
            // Show loading
            const searchBtn = document.getElementById('mapSearchBtn');
            const originalContent = searchBtn.innerHTML;
            searchBtn.innerHTML = '<i class="fas fa-spinner fa-spin"></i>';
            searchBtn.disabled = true;
            
            try {
                // Search with more detailed results
                const response = await fetch(
                    `https://nominatim.openstreetmap.org/search?` +
                    `format=json&limit=10&countrycodes=in&q=${encodeURIComponent(query)}&` +
                    `addressdetails=1&extratags=1&dedupe=1`
                );
                
                if (!response.ok) throw new Error('Search failed');
                
                const results = await response.json();
                
                if (results.length === 0) {
                    showNotification('No results found for your search', 'warning');
                } else if (results.length === 1) {
                    // Single result - navigate directly
                    const result = results[0];
                    navigateToLocation(parseFloat(result.lat), parseFloat(result.lon), result);
                    hideSearchSuggestions();
                } else {
                    // Multiple results - show results panel
                    displaySearchResults(results);
                    hideSearchSuggestions();
                }
                
            } catch (error) {
                console.error('Search error:', error);
                showNotification('Search failed. Please try again.', 'error');
            } finally {
                // Restore button
                searchBtn.innerHTML = originalContent;
                searchBtn.disabled = false;
            }
        }

        // Display search results in side panel
        function displaySearchResults(results) {
            const resultsContainer = document.getElementById('searchResults');
            const resultsList = document.getElementById('searchResultsList');
            
            resultsList.innerHTML = results.map((result, index) => {
                const displayName = formatLocationName(result);
                const fullAddress = result.display_name;
                const locationInfo = getLocationInfo(result);
                
                return `
                    <div class="search-result-item" onclick="selectSearchResult(${index})">
                        <div class="result-header">
                            <i class="fas fa-map-marker-alt"></i>
                            <span class="result-name">${displayName}</span>
                        </div>
                        <div class="result-address">${fullAddress}</div>
                        ${locationInfo ? `<div class="result-info">${locationInfo}</div>` : ''}
                        <div class="result-actions">
                            <button class="btn btn-small btn-outline" onclick="event.stopPropagation(); navigateToLocation(${result.lat}, ${result.lon}, ${JSON.stringify(result).replace(/"/g, '&quot;')})">
                                <i class="fas fa-eye"></i> View
                            </button>
                            <button class="btn btn-small btn-outline" onclick="event.stopPropagation(); addBorewellHere(${result.lat}, ${result.lon})">
                                <i class="fas fa-plus"></i> Add Borewell
                            </button>
                        </div>
                    </div>
                `;
            }).join('');
            
            // Store results for selection
            window.currentSearchResults = results;
            resultsContainer.style.display = 'block';
        }

        // Select search result
        function selectSearchResult(index) {
            const result = window.currentSearchResults[index];
            if (!result) return;
            
            navigateToLocation(parseFloat(result.lat), parseFloat(result.lon), result);
            closeSearchResults();
        }

        // Clear search
        function clearSearch() {
            const searchInput = document.getElementById('mapSearchInput');
            const clearBtn = document.getElementById('clearSearchBtn');
            const inputWrapper = document.querySelector('.search-input-wrapper');
            
            searchInput.value = '';
            clearBtn.style.display = 'none';
            inputWrapper.classList.remove('has-text');
            
            hideSearchSuggestions();
            closeSearchResults();
            clearSearchMarkers();
            
            searchInput.focus();
        }

        // Clear search markers
        function clearSearchMarkers() {
            searchMarkers.forEach(marker => {
                map.removeLayer(marker);
            });
            searchMarkers = [];
        }

        // Show search suggestions
        function showSearchSuggestions() {
            const query = document.getElementById('mapSearchInput').value.trim();
            if (query.length >= 3 && window.currentSuggestions && window.currentSuggestions.length > 0) {
                document.getElementById('searchSuggestions').style.display = 'block';
            }
        }

        // Hide search suggestions
        function hideSearchSuggestions() {
            setTimeout(() => {
                document.getElementById('searchSuggestions').style.display = 'none';
            }, 200);
        }

        // Close search results
        function closeSearchResults() {
            document.getElementById('searchResults').style.display = 'none';
        }

        // Enter borewell adding mode
        function enterAddMode() {
            isAddingBorewell = true;
            
            // Update UI
            document.getElementById('addBorewellBtn').style.display = 'none';
            document.getElementById('cancelAddBtn').style.display = 'inline-flex';
            document.getElementById('mapModeIndicator').style.display = 'block';
            
            // Change cursor
            map.getContainer().style.cursor = 'crosshair';
            
            // Add map click listener
            map.on('click', onMapClick);
            
            // Show instruction notification
            showNotification('Click on the map to select a location for your borewell', 'info');
        }

        // Exit borewell adding mode
        function exitAddMode() {
            isAddingBorewell = false;
            
            // Update UI
            document.getElementById('addBorewellBtn').style.display = 'inline-flex';
            document.getElementById('cancelAddBtn').style.display = 'none';
            document.getElementById('mapModeIndicator').style.display = 'none';
            
            // Reset cursor
            map.getContainer().style.cursor = '';
            
            // Remove map click listener
            map.off('click', onMapClick);
            
            // Clean up
            removeTempMarker();
            hideLocationPanel();
        }

        // Handle map click for adding borewell
        function onMapClick(e) {
            if (!isAddingBorewell) return;
            
            const lat = e.latlng.lat;
            const lng = e.latlng.lng;
            
            // Store selected location
            selectedLocation = { lat, lng };
            
            // Remove previous temp marker
            removeTempMarker();
            
            // Add new temporary marker
            addTempMarker(lat, lng);
            
            // Update location panel
            updateLocationPanel(lat, lng);
            
            // Get address information
            reverseGeocode(lat, lng);
            
            // Load weather for location
            loadWeather(lat, lng);
        }

        // Add temporary marker for selected location
        function addTempMarker(lat, lng) {
            const tempIcon = L.divIcon({
                className: 'temp-marker',
                html: `
                    <div class="temp-marker-content">
                        <div class="marker-pulse-temp"></div>
                        <i class="fas fa-map-pin"></i>
                    </div>
                `,
                iconSize: [30, 30],
                iconAnchor: [15, 30]
            });
            
            tempMarker = L.marker([lat, lng], { icon: tempIcon }).addTo(map);
            
            // Animate to location
            map.setView([lat, lng], Math.max(map.getZoom(), 15), {
                animate: true,
                duration: 1
            });
        }

        // Remove temporary marker
        function removeTempMarker() {
            if (tempMarker) {
                map.removeLayer(tempMarker);
                tempMarker = null;
            }
        }

        // Update location information panel
        function updateLocationPanel(lat, lng) {
            document.getElementById('selectedLat').textContent = lat.toFixed(6);
            document.getElementById('selectedLng').textContent = lng.toFixed(6);
            document.getElementById('selectedAddress').textContent = 'Loading...';
            document.getElementById('locationInfoPanel').style.display = 'block';
        }

        // Hide location panel
        function hideLocationPanel() {
            document.getElementById('locationInfoPanel').style.display = 'none';
        }

        // Reverse geocoding to get address
        async function reverseGeocode(lat, lng) {
            try {
                const response = await fetch(`https://nominatim.openstreetmap.org/reverse?format=json&lat=${lat}&lon=${lng}&zoom=18&addressdetails=1`);
                const data = await response.json();
                
                if (data && data.display_name) {
                    document.getElementById('selectedAddress').textContent = data.display_name;
                } else {
                    document.getElementById('selectedAddress').textContent = 'Address not found';
                }
            } catch (error) {
                console.error('Error getting address:', error);
                document.getElementById('selectedAddress').textContent = 'Address unavailable';
            }
        }

        // Open registration modal with location data
        function openRegistrationModal() {
            if (!selectedLocation) return;
            
            // Fill location data
            document.getElementById('latitude').value = selectedLocation.lat.toFixed(6);
            document.getElementById('longitude').value = selectedLocation.lng.toFixed(6);
            document.getElementById('locationAddress').value = document.getElementById('selectedAddress').textContent;
            
            // Show modal
            document.getElementById('borewellModal').style.display = 'flex';
            
            // Focus on first input
            setTimeout(() => {
                document.getElementById('wellType').focus();
            }, 100);
        }

        // Close modal
        function closeModal() {
            document.getElementById('borewellModal').style.display = 'none';
            exitAddMode();
        }

        // Locate user
        function locateUser() {
            if (!navigator.geolocation) {
                showNotification('Geolocation is not supported by your browser', 'error');
                return;
            }
            
            // Show loading
            const locateBtn = document.getElementById('locateBtn');
            const originalContent = locateBtn.innerHTML;
            locateBtn.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Locating...';
            locateBtn.disabled = true;
            
            navigator.geolocation.getCurrentPosition(
                (position) => {
                    const lat = position.coords.latitude;
                    const lng = position.coords.longitude;
                    
                    // Animate to user location
                    map.setView([lat, lng], 15, { animate: true });
                    
                    // Add user location marker
                    const userIcon = L.divIcon({
                        className: 'user-location-marker',
                        html: '<i class="fas fa-user"></i>',
                        iconSize: [20, 20],
                        iconAnchor: [10, 10]
                    });
                    
                    L.marker([lat, lng], { icon: userIcon })
                        .addTo(map)
                        .bindPopup('<strong>Your Location</strong>')
                        .openPopup();
                    
                    // Load weather
                    loadWeather(lat, lng);
                    
                    // Reset button
                    locateBtn.innerHTML = originalContent;
                    locateBtn.disabled = false;
                    
                    showNotification('Location found successfully!', 'success');
                },
                (error) => {
                    let message = 'Unable to get your location';
                    switch (error.code) {
                        case error.PERMISSION_DENIED:
                            message = 'Location access denied by user';
                            break;
                        case error.POSITION_UNAVAILABLE:
                            message = 'Location information unavailable';
                            break;
                        case error.TIMEOUT:
                            message = 'Location request timed out';
                            break;
                    }
                    
                    showNotification(message, 'error');
                    
                    // Reset button
                    locateBtn.innerHTML = originalContent;
                    locateBtn.disabled = false;
                },
                {
                    enableHighAccuracy: true,
                    timeout: 10000,
                    maximumAge: 300000
                }
            );
        }

        // Load weather data with enhanced information
        async function loadWeather(lat, lng, targetElement = null) {
            const weatherContainer = targetElement || document.getElementById('weatherWidget');
            weatherContainer.innerHTML = '<div class="weather-loading"><i class="fas fa-spinner fa-spin"></i> Loading weather...</div>';

            try {
                const response = await fetch(`/api/weather/current?lat=${lat}&lng=${lng}`);
                const result = await response.json();
                
                if (!result.success) {
                    throw new Error(result.message);
                }
                
                const data = result.data;
                
                weatherContainer.innerHTML = `
                    <div class="weather-compact">
                        <div class="weather-items">
                            <div class="weather-item">
                                <i class="fas fa-thermometer-half"></i>
                                <span class="value">${data.temperature}°C</span>
                            </div>
                            <div class="weather-item">
                                <i class="fas fa-wind"></i>
                                <span class="value">${data.windSpeed} km/h</span>
                            </div>
                            <div class="weather-item">
                                <i class="fas fa-tint"></i>
                                <span class="value">${data.humidity}%</span>
                            </div>
                            <div class="weather-item">
                                <i class="fas fa-weight"></i>
                                <span class="value">${data.pressure} hPa</span>
                            </div>
                        </div>
                    </div>
                `;
                
                // Store weather data for later use
                if (!targetElement) {
                    window.currentWeatherData = data;
                }
                
            } catch (error) {
                console.error('Weather error:', error);
                weatherContainer.innerHTML = `
                    <div class="weather-error-compact">
                        <i class="fas fa-exclamation-triangle"></i>
                        <span>Weather unavailable</span>
                    </div>
                `;
            }
        }

        // Load initial weather (Delhi)
        function loadInitialWeather() {
            loadWeather(28.6139, 77.2090);
        }

        // Create custom CSS styles
        function createCustomStyles() {
            const style = document.createElement('style');
            style.textContent = `
                .custom-borewell-marker {
                    position: relative;
                }
                
                .borewell-marker {
                    position: relative;
                    display: flex;
                    align-items: center;
                    justify-content: center;
                }
                
                .marker-inner {
                    width: 24px;
                    height: 24px;
                    border-radius: 50%;
                    display: flex;
                    align-items: center;
                    justify-content: center;
                    color: white;
                    font-size: 12px;
                    border: 3px solid;
                    z-index: 2;
                    position: relative;
                }
                
                .marker-pulse {
                    position: absolute;
                    width: 30px;
                    height: 30px;
                    border-radius: 50%;
                    opacity: 0.3;
                    animation: pulse 2s infinite;
                }
                
                @keyframes pulse {
                    0% { transform: scale(0.8); opacity: 0.5; }
                    50% { transform: scale(1.2); opacity: 0.3; }
                    100% { transform: scale(0.8); opacity: 0.5; }
                }
                
                .temp-marker-content {
                    position: relative;
                    color: #ef4444;
                    font-size: 18px;
                    display: flex;
                    align-items: center;
                    justify-content: center;
                }
                
                .marker-pulse-temp {
                    position: absolute;
                    width: 30px;
                    height: 30px;
                    border-radius: 50%;
                    background-color: #ef4444;
                    opacity: 0.3;
                    animation: pulse 1s infinite;
                }
                
                .user-location-marker {
                    background: #3b82f6;
                    color: white;
                    border-radius: 50%;
                    display: flex;
                    align-items: center;
                    justify-content: center;
                    font-size: 12px;
                }
            `;
            document.head.appendChild(style);
        }

        // Form validation setup
        function setupFormValidation() {
            const form = document.querySelector('.borewell-form');
            
            form.addEventListener('submit', function(e) {
                if (!validateForm()) {
                    e.preventDefault();
                    return false;
                }
                
                // Show loading state
                const submitBtn = form.querySelector('button[type="submit"]');
                submitBtn.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Registering...';
                submitBtn.disabled = true;
            });
        }

        // Validate form
        function validateForm() {
            const requiredFields = ['wellType', 'depthType', 'exactDepth'];
            let isValid = true;
            
            requiredFields.forEach(fieldName => {
                const field = document.getElementById(fieldName);
                if (!field.value.trim()) {
                    showValidationError(field, 'This field is required');
                    isValid = false;
                } else {
                    clearValidationError(field);
                }
            });
            
            // Validate depth
            const depth = document.getElementById('exactDepth').value;
            if (depth && (isNaN(depth) || depth <= 0)) {
                showValidationError(document.getElementById('exactDepth'), 'Please enter a valid depth');
                isValid = false;
            }
            
            return isValid;
        }

        // Show validation error
        function showValidationError(input, message) {
            clearValidationError(input);
            input.classList.add('error');
            
            const errorDiv = document.createElement('div');
            errorDiv.className = 'validation-error';
            errorDiv.textContent = message;
            input.parentNode.appendChild(errorDiv);
        }

        // Clear validation error
        function clearValidationError(input) {
            input.classList.remove('error');
            const errorDiv = input.parentNode.querySelector('.validation-error');
            if (errorDiv) {
                errorDiv.remove();
            }
        }

        // Utility functions
        function showNotification(message, type = 'info') {
            // Use the main.js notification function if available
            if (window.BhujalUtils && window.BhujalUtils.showNotification) {
                window.BhujalUtils.showNotification(message, type);
            } else {
                alert(message);
            }
        }

        // Placeholder functions for future implementation
        function editBorewell(id) {
            showNotification('Edit functionality coming soon!', 'info');
        }

        function viewBorewellDetails(id) {
            showNotification('Details view coming soon!', 'info');
        }
    </script>
    <script src="/js/main.js"></script>
</body>
</html>
